
说明 本框架是一款轻量级、开源的框架 因为框架采用了命名空间等方式、支持的php版本要大于5.4以上才可使用

安装步骤

1、直接下载此框架放到你的坏境目录下

2、访问方式是 根目录下的index.php为入口

3、url美化 隐藏了index.php 不过你的apache要开启重写模式 不知道的可以百度一下 比较简单 在这里不做过多的介绍

4、路由方式 你的服务器地址  例如 youserver 出现了欢迎使用此框架即安装成功 默认访问的是 index控制器下的index方法
		例如：youserver/index/index

5、路由参数

	例如 youserver/index/index/id/1/name/zhangsan
	访问的是 index控制器下的index方法 携带了 id=1 name=zhangsan的两个参数 可以使用 get()方法接收这两个参数 方法详情下面会详解

6、安全方面

	在index.php 定义了debug的一个常量 改成false之后 看不到任何的错误信息
	建议在开发阶段 改成true 项目上线部署的时候改成false;
	
7、是否开启log日志 也可以在index.php更改一个LOG的常量 改成false 不会开启日志 ture的话会开启写入日志

8、控制器
	控制器一般存放到 app\controller目录下 建立控制器 请参考Index控制器的规范 
	命名空间 namespace app\controller;
	继承core\start 初始化类即可
	方法命名 随意  如index list update 访问时 youservername/控制器名/方法名/键1/值1 即可

9、模型
	模型文件放在 app\model目下 命名空间为 app\model;
	要继承 core\lib\model的父类模型 或者use core\lib\model 然后可以直接继承model 父类模型主要是一些增删改查 方法后面会详解
	
10、静态资源
	暂不指定目录存放 用户可以在app目录下 建立文件夹存放静态资源 然后模版文件 输入常量 APP 拼接上 /用户新建的目录/css/ 即可找到这个目录

11、视图文件
	文件目录在app\views\ 下面  具体的不做要求 也可以新建目录 控制器加载模版时 请拼上 文件夹名/.../模版名 后缀名为php 可加可不加  例如 test/index.php 也可写成 tset/index 注意点(模版后缀同意为php文件 ) 如果控制加载模版时 参数为模版名时 会直接加载views下面的模版  例如 ('index') 会直接加载views下面 index.php 模版 

12、自定义函数
	可以写到common/function.php里面即可 用的时候请使用 Loader(方法名,参数)方法 参数为函数名 例如loader('funcname',$arr)参数1为方法名 参数2为 具体的参数可以为 array|object|string

13、error模版
	关闭debug之后 出现异常会加载views/error 的一些错误模版 可以进行修改 也可以不修改

14、配置文件
	配置文件放在了 core/config文件中 一般的配置信息 都可以在里面根据实际情况下进行修改
	例如  数据库配置信息 路由配置信息 log日志配置信息

15、全局函数详情
	全局函数放在了 核心目录/common目录下 名为function.php
	下面进行关于所有函数的详解及使用
	
	15-1、 	p() 函数 用来打印出 string|array|bool 参数只有一个 那就是 值
	15-2、  post() 函数 用来接收post数据的 参数有三个 
			a、 第一个参数 是具体的POST数组中的key 例如 post('name') 等于 $_POST['name'] 返回的是具体的值
			b、 第二个参数 默认值 如果调用 post这个函数 没有找到其中的key会返回第二个参数的值 也就是自定义的默认值 可以不设置默认返回false
			c、 第三个参数 验证规则 string或者int 默认不进行验证(注意 但也会进行相关安全过滤等 请放心) 验证不通过时会返回 第二个参数
		post函数 也可以不传递任何参数 返回的是一个数组 也是用户提交post的所有数据 (安全方面 也进行了相关的过滤 例如 特殊字符转义 删除html标签或者删除js代码等等...)

	15-3、  get() 与post函数类似 是接收get数据的 也有三个参数
			a、第一个参数是 $_GET参数的 key 可以为空 为空则返回所有的get的参数 没有参数则返回false;
			b、第二个参数是返回自定义的默认值 不传默认为false;
			c、第三个是验证规则 int|string 数字或者字符串 默认不进行验证 验证通过返回 设置的默认值
			安全方面 如果值里面包含特殊字符 会被返回默认值 也就是第二个参数 get参数被容许传递的值只有大小写字母和数字

	15-4、网页的跳转 redirect() 参数有三个 
			1、第一个参数是 跳转的地址 默认为false 如果不填则返回上一页 填了则跳转到相应的地址
			2、第二个参数是 等待的时间 默认为三秒 3秒后跳到相应的地址
			3、第三个参数是 显示的提示信息(会在等待的时间内看到这个提示信息) 但是如果设置第二个参数为0或者为false 是看不到的提示信息的 因为是进行了直接的跳转了
	15-5 msubstr() 截取中文字符 有四个参数 1个参数是必填的 那就是第一个参数 要截取的字符串
			1、第一个参数是 要截取的字符串 可以为中文也可以为字母和数字
			2、第二个参数是 截取的开始位置 默认为0意思是从第一个开始截取
			3、第三个参数是 截取的终点位置 默认是截取到最后 
			4、第四个参数是 字符的类型 默认为 utf-8 也可以设置为gbk|gb2312|big5
			返回的是 截取完成后的字符串
	15-6 removeJsStr() 删除js代码 只有一个参数 就是要被删除的js代码的字符串
			返回的是删除后的 字符串

	15-7 FileUpload() 附件上传		 
  			@param1 string $path 上传的路径 必须要的参数
  			@param2 array|string $file 文件资源 可不传会自动获取到$_FILES里的参数
  			@param3 int $max 如许上传的文件最大限度 单位 m 默认2m
  			@param4 string $fileName  文件名 可以设置上传成功后的附件名称 不传有默认设置
  			@param5 array $type      可以上传的类型  有默认设置 也可以设置
  			@return bool|string      失败或者成功的路径  

	15-8 xmlToArray() xml数据转成普通数组
			参数1是一个xml数据

	15-9 loader() 调用自定义函数
			参数1 是一个函数名的字符串 
			参数2 是调用这个函数参数 可不传这个参数	 例如: loader('xmlToArray') 会调用 xmlToArray()这个函数
     	
	15-10 dump() 打印输出 可以 为 array|string|int|object|bool|null 只需要一个参数即可。。

16、控制器
	新建控制器时 如果只做简单的输出 可以不用继承 控制器父类 
	如果要用到载入模版时 需要继承父类 继承也比较简单 \core\lib\controller 即可使用父类控制器了 例如 class Index extends \core\lib\controlelr
	也可使用关键字 use 引入　use core\lib\controller;  然后直接继承 controller即可 例如 class Index extends controlelr
	注意点 建立控制器时 要使用驼峰法 首字母大写(Index) 而且要与文件名相同

	父类控制器 controller 只有一个方法就是view方法 载入模版文件 并且可以传递参数  有两个参数 
		1、是模版文件名(后缀名可带可以不带) 但是模版文件一定是以.php为后缀 
		2、具体的参数 必须以数组的方式传递 
			例如 	$arr = ['id'=>1]; 
					$this->view('index',['arr'=>$arr]);

			在模版输出的时候需要注意 示例 假如有一个数组 $arr= ['id'=>1]; 输出时 直接输出$arr['key']即可 echo $arr['id'];  即可得到 1这个值 
17、模型
	建立模型时 文件命名规范请使用驼峰法 类名要与文件名相同 例如文件名叫Stu.php 类名必须是 Stu 
	命名空间根据自身的情况 默认 app\model;  如果有需求要操作数据库 请继承 core\lib\model父类 或者use core\lib\model; 然后可以直接继承	数据库配置文件在core/config/databases.php中 自行进行修改

	注意点--> 因为model父类的方法都是靠PDO来支持 必须开启PDO 扩展哦

	方法详解 说明
	select($table, $join, $columns, $where) 查询

		表名.
		table [string]
		多表查询,不使用可以忽略.
		join [array]  

		要查询的字段名.
		columns [string/array] 你可以使用*来匹配所有字段, 但如果你指名字段名可以很好的提高性能.  你可以使用别名，以防止字段冲突 如
		$data = $database->select("account", [
					"user_id",
					"nickname(my_nickname)"  //括号内代表字段别名
				], [
					"LIMIT" => 20
				]); 
		
		where (optional) [array]
		查询的条件.

	insert($table, $data) 插入
		$table 表名 
		$data 数组 要插入的表字段和对应的值  多条数据可以使用三维数组
		return 主键Id


	update($table, $data, $where)	修改
		table [string]
		表名.
		data [array]  
		修改的数据.
		where (optional) [array]
		WHERE 条件 条件一定要存在 不然会修改整个表的数据

		return 返回受影响的行数
 
	delete($table, $where) 删除表中的数据  一个比较危险的操作，操作前请考虑好。。。

		$database->delete($database->table,['id'=>$id]);
		多个条件 请使用
		$database->delete("table", [
    		"AND" => [
       			 "type" => "business"
        		"age[<]" => 18
   			]
		]);
		Return: [int] 返回被删除的行数.


	$where 条件详解
	$database->select("account", "user_name", [
	    "email" => "foo@bar.com"
	]);
	// WHERE email = 'foo@bar.com'
	 
	$database->select("account", "user_name", [
	    "user_id" => 200
	]);
	// WHERE user_id = 200
	 
	$database->select("account", "user_name", [
	    "user_id[>]" => 200
	]);
	// WHERE user_id > 200
	 
	$database->select("account", "user_name", [
	    "user_id[>=]" => 200
	]);
	// WHERE user_id >= 200
	 
	$database->select("account", "user_name", [
	    "user_id[!]" => 200
	]);
	// WHERE user_id != 200
	 
	$database->select("account", "user_name", [
	    "age[<>]" => [200, 500]
	]);
	// WHERE age BETWEEN 200 AND 500
	 
	$database->select("account", "user_name", [
	    "age[><]" => [200, 500]
	]);
	// WHERE age NOT BETWEEN 200 AND 500

	// 你不仅可以使用字符串和数字，还可以使用数组
	$database->select("account", "user_name", [
	    "OR" => [
	        "user_id" => [2, 123, 234, 54],
	        "email" => ["foo@bar.com", "cat@dog.com", "admin@medoo.in"]
	    ]
	]);
	// WHERE
	// user_id IN (2,123,234,54) OR
	// email IN ('foo@bar.com','cat@dog.com','admin@medoo.in')

	// 多条件查询
	$database->select("account", "user_name", [
	    "AND" => [
	        "user_name[!]" => "foo",
	        "user_id[!]" => 1024,
	        "email[!]" => ["foo@bar.com", "cat@dog.com", "admin@medoo.in"],
	        "city[!]" => null,
	        "promoted[!]" => true
	    ]
	]);

	//条件搜索
	//你可以使用"AND" 或 "OR" 来拼接非常复杂的SQL语句
	// 基础使用
	$database->select("account", "user_name", [
	    "AND" => [
	        "user_id[>]" => 200,
	        "age[<>]" => [18, 25],
	        "gender" => "female"
	    ]
	]);
	// WHERE user_id > 200 AND age BETWEEN 18 AND 25 AND gender = 'female'
	 
	$database->select("account", "user_name", [
	    "OR" => [
	        "user_id[>]" => 200,
	        "age[<>]" => [18, 25],
	        "gender" => "female"
	    ]
	]);
	// WHERE user_id > 200 OR age BETWEEN 18 AND 25 OR gender = 'female'
	 
	// 复合条件
	$database->has("account", [
	    "AND" => [
	        "OR" => [
	            "user_name" => "foo",
	            "email" => "foo@bar.com"
	        ],
	        "password" => "12345"
	    ]
	]);
	// WHERE (user_name = 'foo' OR email = 'foo@bar.com') AND password = '12345'

	// 模糊匹配 Like
	// LIKE 使用语法 [~] 
	// 默认情况下，使用%在前后包含关键词
	$database->select("person", "id", [
	    "city[~]" => "lon"
	]);
	 
	WHERE "city" LIKE '%lon%'
	 
	// 数组形式，查询多个关键词
	$database->select("person", "id", [
	    "city[~]" => ["lon", "foo", "bar"]
	]);
	 
	WHERE "city" LIKE '%lon%' OR "city" LIKE '%foo%' OR "city" LIKE '%bar%'
	 
	// 不包含 [!~]
	$database->select("person", "id", [
	    "city[!~]" => "lon"
	]);
	 
	WHERE "city" NOT LIKE '%lon%'

	排序
	$database->select("account", "user_id", [
	 
		"ORDER" => "user_id",
	 
		"ORDER" => [
			"user_id" => [43, 12, 57, 98, 144, 1],
	 
			"register_date",
	 
			"profile_id" => "DESC",
	 
			"date" => "ASC"
		]
	]);

	使用SQL函数
	在一些特殊的情况下，你可能需要使用SQL系统函数，只需要字段名前加上#号即可
	$data = $database->select('account', [
	    'user_id',
	    'user_name'
	], [
	    '#datetime' => 'NOW()'
	]);

	其它参数
	$database->select("account", "user_id", [
	    "GROUP" => "type",
	    "HAVING" => [
	        "user_id[>]" => 500
	    ],
	    "LIMIT" => [20, 100]
	]);
	//  SELECT user_id FROM account
	//  GROUP BY type
	//  HAVING user_id > 500
	//  LIMIT 20,100


	get($table, $columns, $where) 从表中返回一行数据
		$email = $database->get("account", "email", [
		    "user_id" => 1234
		]);
		Return: [string/array] 返回查询到的数据.

	Has() 确定数据是否存在 has($table, $where)
		$database->has("account", [
		    "AND" => [
		        "OR" => [
		            "user_name" => "foo",
		            "email" => "foo"
		        ],
		        "password" => "12345"
		    ]
		])
		Return: [boolean] 返回 TRUE 或者 FALSE.

	count($table, $where) 获取数据表中的行数
		table [string]
		表名.
		where (optional) [array]
		WHERE 条件.
		$database->count($database->table);
		Return: [number] 行的数量.

	max($table, $column, $where) 获得数据表中，值最大的
		table [string]
		表名.
		column [string]
		查询的字段列.
		where (optional) [array]
		WHERE 条件.
		$database->max($database->table,'id');
		Return: [number] 返回最大的值.

	min($table, $column, $where) 获得某个列中的最小的值
		table [string]
		表名.
		column [string]
		需要查询的列.
		where (optional) [array]
		WHERE 条件.
		$database->min($database->table,'id');
		Return: [number] 返回最小的值.

	avg($table, $column, $where) 获得某个列字段的平均值
		table [string]
		表名.
		column [string]
		列字段
		where (optional) [array]
		WHERE 条件.
		$database->avg($database->table,'id');
		Return: [number] 平均值.

	sum($table, $column, $where) 某个列字段相加
		table [string]
		表名.
		column [string]
		查询的列.
		where (optional) [array]
		WHERE 条件.

		$database->sum($database->table,'id');
		Return: [number] 相加的值.

	replace($table, $columns, $where) 将新的数据替换旧的数据
		$database->replace("account", "type", [
		    "user" => "new_user",
		    "business" => "new_business"
		], [
		    "user_id[>]" => 1000
		]);
		// Return: [int] 返回受影响的行数

	query($query) 执行sql语句
		query [string]
		Return: [object] The PDOStatement object.
		此方法用于使用复杂的SQL语句，SQL注入问题请参考quote方法
		
			$database->query("CREATE TABLE table (
			    c1 INT STORAGE DISK,
			    c2 INT STORAGE MEMORY
			) ENGINE NDB;");
		 
		$data = $database->query("SELECT email FROM account")->fetchAll();
		print_r($data);
		
	quote($string) 字符串转义 
		$string [string]
		字符串.
		Return: [string]

		$data = "Medoo";
		echo "We love " . $data; // We love Medoo
		echo "We love " . $database->quote($data); // We love 'Medoo'

	PDO 	
	$database->pdo->beginTransaction();//开启事务
	$database->insert("account", [
	    "user_name" => "foo",
	    "email" => "foo@bar.com",
	    "age" => 25
	]);
	$database->pdo->commit(); //提交
	$database->pdo->rollBack(); //回滚

	Debug
	输入sql语句，但不执行

	输出sql语句，不需要使用echo或其它方法。调试完成请移除此代码
	$database->debug()->select("bccount", [
	    "user_name",
	    "email"
	], [
	    "user_id[<]" => 20
	]);
	
	获得最后一个执行的错误.
	error()
	Return: [array] 返回错误的数组代码
	$database->select("bccount", [
	    "user_name",
	    "email"
	], [
	    "user_id[<]" => 20
	]);
	 
	var_dump($database->error());
	// array(3) { [0]=> string(5) "42S02" [1]=> int(1146) [2]=> string(36) "Table 'my_database.bccount' doesn't exist" } /如果定义一个不存在的表名 则会说 表不存在


	log() 返回所有执行的查询。 可以用此函数来查询、调试SQL语句
	$database->insert("account", [
	    "user_name" => "foo",
	    "email" => "foo@bar.com"
	]);
	var_dump( $database->log() );
	// array(1) {
	//  [1]=> string(74) "INSERT INTO "account" ("user_name", "email") VALUES ('foo', 'foo@bar.com')"
	// }


	Last_query() 返回最后一条执行的SQL语句.   return: [string]
	和log()很相似，但只返回最后一次执行的SQL语句



	info()  查看数据库相关信息
	Return: [string]  返回数据库相关信息
	print_r($database->info());
	/*
	Array
	(
	    [server] => Uptime: 5074  Threads: 1  Questions: 15  Slow queries: 0  Opens: 67  Flush tables: 1
	        Open tables: 60  Queries per second avg: 0.002
	    [client] => mysqlnd 5.0.10 - 20111026 - $Id: e707c415db32080b3752b232487a435ee0372157 $
	    [driver] => mysql
	    [version] => 5.6.10
	    [connection] => localhost via TCP/IP
	)
	*/


	总结。
	首先,恭喜你看完了开发文档哦,不足之处请指出,请联系QQ 82443076 欢迎来骚扰
	——__—— (:   没有了哦 。。